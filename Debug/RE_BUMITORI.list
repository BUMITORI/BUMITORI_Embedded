
RE_BUMITORI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002784  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002890  08002890  00003890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028bc  080028bc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080028bc  080028bc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028bc  080028bc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028bc  080028bc  000038bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028c0  080028c0  000038c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080028c4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  080028d0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080028d0  00004114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d03a  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d9e  00000000  00000000  0001106f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00012e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae6  00000000  00000000  00013bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d5a  00000000  00000000  000146d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5ef  00000000  00000000  0002c430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0c3  00000000  00000000  0003aa1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6ae2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a90  00000000  00000000  000c6b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ca5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002878 	.word	0x08002878

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002878 	.word	0x08002878

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fbfc 	bl	800094c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f834 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f930 	bl	80003bc <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 f876 	bl	800024c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f902 	bl	8000368 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000164:	f000 f8a8 	bl	80002b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000168:	f000 fa42 	bl	80005f0 <MFRC522_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800016c:	2201      	movs	r2, #1
 800016e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000172:	4811      	ldr	r0, [pc, #68]	@ (80001b8 <main+0x6c>)
 8000174:	f000 fed8 	bl	8000f28 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_AUTORELOAD(&htim2, 999);
 8000178:	4b10      	ldr	r3, [pc, #64]	@ (80001bc <main+0x70>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000180:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000182:	4b0e      	ldr	r3, [pc, #56]	@ (80001bc <main+0x70>)
 8000184:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000188:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 800018a:	4b0c      	ldr	r3, [pc, #48]	@ (80001bc <main+0x70>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000192:	635a      	str	r2, [r3, #52]	@ 0x34
			    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
			    }
			    HAL_Delay(500);
			    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
			    */
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000194:	2100      	movs	r1, #0
 8000196:	4809      	ldr	r0, [pc, #36]	@ (80001bc <main+0x70>)
 8000198:	f001 fe24 	bl	8001de4 <HAL_TIM_PWM_Start>
	  HAL_Delay(500);
 800019c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001a0:	f000 fc36 	bl	8000a10 <HAL_Delay>
	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80001a4:	2100      	movs	r1, #0
 80001a6:	4805      	ldr	r0, [pc, #20]	@ (80001bc <main+0x70>)
 80001a8:	f001 febe 	bl	8001f28 <HAL_TIM_PWM_Stop>
	  HAL_Delay(5000);
 80001ac:	f241 3088 	movw	r0, #5000	@ 0x1388
 80001b0:	f000 fc2e 	bl	8000a10 <HAL_Delay>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001b4:	bf00      	nop
 80001b6:	e7ed      	b.n	8000194 <main+0x48>
 80001b8:	40011000 	.word	0x40011000
 80001bc:	20000080 	.word	0x20000080

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b090      	sub	sp, #64	@ 0x40
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0318 	add.w	r3, r7, #24
 80001ca:	2228      	movs	r2, #40	@ 0x28
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f002 fb26 	bl	8002820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e2:	2301      	movs	r3, #1
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f0:	2301      	movs	r3, #1
 80001f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f4:	2302      	movs	r3, #2
 80001f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001fe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000202:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	f107 0318 	add.w	r3, r7, #24
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fea5 	bl	8000f58 <HAL_RCC_OscConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000214:	f000 f954 	bl	80004c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000218:	230f      	movs	r3, #15
 800021a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021c:	2302      	movs	r3, #2
 800021e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000224:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2102      	movs	r1, #2
 8000232:	4618      	mov	r0, r3
 8000234:	f001 f912 	bl	800145c <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800023e:	f000 f93f 	bl	80004c0 <Error_Handler>
  }
}
 8000242:	bf00      	nop
 8000244:	3740      	adds	r7, #64	@ 0x40
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000250:	4b17      	ldr	r3, [pc, #92]	@ (80002b0 <MX_SPI1_Init+0x64>)
 8000252:	4a18      	ldr	r2, [pc, #96]	@ (80002b4 <MX_SPI1_Init+0x68>)
 8000254:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000256:	4b16      	ldr	r3, [pc, #88]	@ (80002b0 <MX_SPI1_Init+0x64>)
 8000258:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800025c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800025e:	4b14      	ldr	r3, [pc, #80]	@ (80002b0 <MX_SPI1_Init+0x64>)
 8000260:	2200      	movs	r2, #0
 8000262:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000264:	4b12      	ldr	r3, [pc, #72]	@ (80002b0 <MX_SPI1_Init+0x64>)
 8000266:	2200      	movs	r2, #0
 8000268:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800026a:	4b11      	ldr	r3, [pc, #68]	@ (80002b0 <MX_SPI1_Init+0x64>)
 800026c:	2200      	movs	r2, #0
 800026e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000270:	4b0f      	ldr	r3, [pc, #60]	@ (80002b0 <MX_SPI1_Init+0x64>)
 8000272:	2200      	movs	r2, #0
 8000274:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000276:	4b0e      	ldr	r3, [pc, #56]	@ (80002b0 <MX_SPI1_Init+0x64>)
 8000278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800027c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800027e:	4b0c      	ldr	r3, [pc, #48]	@ (80002b0 <MX_SPI1_Init+0x64>)
 8000280:	2210      	movs	r2, #16
 8000282:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000284:	4b0a      	ldr	r3, [pc, #40]	@ (80002b0 <MX_SPI1_Init+0x64>)
 8000286:	2200      	movs	r2, #0
 8000288:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800028a:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <MX_SPI1_Init+0x64>)
 800028c:	2200      	movs	r2, #0
 800028e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000290:	4b07      	ldr	r3, [pc, #28]	@ (80002b0 <MX_SPI1_Init+0x64>)
 8000292:	2200      	movs	r2, #0
 8000294:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000296:	4b06      	ldr	r3, [pc, #24]	@ (80002b0 <MX_SPI1_Init+0x64>)
 8000298:	220a      	movs	r2, #10
 800029a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800029c:	4804      	ldr	r0, [pc, #16]	@ (80002b0 <MX_SPI1_Init+0x64>)
 800029e:	f001 fa6b 	bl	8001778 <HAL_SPI_Init>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002a8:	f000 f90a 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000028 	.word	0x20000028
 80002b4:	40013000 	.word	0x40013000

080002b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b08a      	sub	sp, #40	@ 0x28
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002be:	f107 0320 	add.w	r3, r7, #32
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	611a      	str	r2, [r3, #16]
 80002d6:	615a      	str	r2, [r3, #20]
 80002d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002da:	4b22      	ldr	r3, [pc, #136]	@ (8000364 <MX_TIM2_Init+0xac>)
 80002dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80002e2:	4b20      	ldr	r3, [pc, #128]	@ (8000364 <MX_TIM2_Init+0xac>)
 80002e4:	2247      	movs	r2, #71	@ 0x47
 80002e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000364 <MX_TIM2_Init+0xac>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000364 <MX_TIM2_Init+0xac>)
 80002f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000364 <MX_TIM2_Init+0xac>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002fc:	4b19      	ldr	r3, [pc, #100]	@ (8000364 <MX_TIM2_Init+0xac>)
 80002fe:	2200      	movs	r2, #0
 8000300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000302:	4818      	ldr	r0, [pc, #96]	@ (8000364 <MX_TIM2_Init+0xac>)
 8000304:	f001 fd1f 	bl	8001d46 <HAL_TIM_PWM_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800030e:	f000 f8d7 	bl	80004c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000312:	2300      	movs	r3, #0
 8000314:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000316:	2300      	movs	r3, #0
 8000318:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800031a:	f107 0320 	add.w	r3, r7, #32
 800031e:	4619      	mov	r1, r3
 8000320:	4810      	ldr	r0, [pc, #64]	@ (8000364 <MX_TIM2_Init+0xac>)
 8000322:	f002 f941 	bl	80025a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800032c:	f000 f8c8 	bl	80004c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000330:	2360      	movs	r3, #96	@ 0x60
 8000332:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	4619      	mov	r1, r3
 8000346:	4807      	ldr	r0, [pc, #28]	@ (8000364 <MX_TIM2_Init+0xac>)
 8000348:	f001 fe52 	bl	8001ff0 <HAL_TIM_PWM_ConfigChannel>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000352:	f000 f8b5 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000356:	4803      	ldr	r0, [pc, #12]	@ (8000364 <MX_TIM2_Init+0xac>)
 8000358:	f000 fa10 	bl	800077c <HAL_TIM_MspPostInit>

}
 800035c:	bf00      	nop
 800035e:	3728      	adds	r7, #40	@ 0x28
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000080 	.word	0x20000080

08000368 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800036c:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <MX_USART2_UART_Init+0x4c>)
 800036e:	4a12      	ldr	r2, [pc, #72]	@ (80003b8 <MX_USART2_UART_Init+0x50>)
 8000370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000372:	4b10      	ldr	r3, [pc, #64]	@ (80003b4 <MX_USART2_UART_Init+0x4c>)
 8000374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800037a:	4b0e      	ldr	r3, [pc, #56]	@ (80003b4 <MX_USART2_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000380:	4b0c      	ldr	r3, [pc, #48]	@ (80003b4 <MX_USART2_UART_Init+0x4c>)
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000386:	4b0b      	ldr	r3, [pc, #44]	@ (80003b4 <MX_USART2_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800038c:	4b09      	ldr	r3, [pc, #36]	@ (80003b4 <MX_USART2_UART_Init+0x4c>)
 800038e:	220c      	movs	r2, #12
 8000390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000392:	4b08      	ldr	r3, [pc, #32]	@ (80003b4 <MX_USART2_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000398:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <MX_USART2_UART_Init+0x4c>)
 800039a:	2200      	movs	r2, #0
 800039c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800039e:	4805      	ldr	r0, [pc, #20]	@ (80003b4 <MX_USART2_UART_Init+0x4c>)
 80003a0:	f002 f960 	bl	8002664 <HAL_UART_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003aa:	f000 f889 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200000c8 	.word	0x200000c8
 80003b8:	40004400 	.word	0x40004400

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d0:	4b37      	ldr	r3, [pc, #220]	@ (80004b0 <MX_GPIO_Init+0xf4>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a36      	ldr	r2, [pc, #216]	@ (80004b0 <MX_GPIO_Init+0xf4>)
 80003d6:	f043 0310 	orr.w	r3, r3, #16
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b34      	ldr	r3, [pc, #208]	@ (80004b0 <MX_GPIO_Init+0xf4>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0310 	and.w	r3, r3, #16
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e8:	4b31      	ldr	r3, [pc, #196]	@ (80004b0 <MX_GPIO_Init+0xf4>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a30      	ldr	r2, [pc, #192]	@ (80004b0 <MX_GPIO_Init+0xf4>)
 80003ee:	f043 0320 	orr.w	r3, r3, #32
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b2e      	ldr	r3, [pc, #184]	@ (80004b0 <MX_GPIO_Init+0xf4>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0320 	and.w	r3, r3, #32
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b2b      	ldr	r3, [pc, #172]	@ (80004b0 <MX_GPIO_Init+0xf4>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a2a      	ldr	r2, [pc, #168]	@ (80004b0 <MX_GPIO_Init+0xf4>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b28      	ldr	r3, [pc, #160]	@ (80004b0 <MX_GPIO_Init+0xf4>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	607b      	str	r3, [r7, #4]
 8000416:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	4b25      	ldr	r3, [pc, #148]	@ (80004b0 <MX_GPIO_Init+0xf4>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a24      	ldr	r2, [pc, #144]	@ (80004b0 <MX_GPIO_Init+0xf4>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b22      	ldr	r3, [pc, #136]	@ (80004b0 <MX_GPIO_Init+0xf4>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0308 	and.w	r3, r3, #8
 800042c:	603b      	str	r3, [r7, #0]
 800042e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000436:	481f      	ldr	r0, [pc, #124]	@ (80004b4 <MX_GPIO_Init+0xf8>)
 8000438:	f000 fd76 	bl	8000f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	2110      	movs	r1, #16
 8000440:	481d      	ldr	r0, [pc, #116]	@ (80004b8 <MX_GPIO_Init+0xfc>)
 8000442:	f000 fd71 	bl	8000f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2101      	movs	r1, #1
 800044a:	481c      	ldr	r0, [pc, #112]	@ (80004bc <MX_GPIO_Init+0x100>)
 800044c:	f000 fd6c 	bl	8000f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000450:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000456:	2301      	movs	r3, #1
 8000458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045e:	2302      	movs	r3, #2
 8000460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	4619      	mov	r1, r3
 8000468:	4812      	ldr	r0, [pc, #72]	@ (80004b4 <MX_GPIO_Init+0xf8>)
 800046a:	f000 fbd9 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800046e:	2310      	movs	r3, #16
 8000470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000472:	2301      	movs	r3, #1
 8000474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047a:	2302      	movs	r3, #2
 800047c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	4619      	mov	r1, r3
 8000484:	480c      	ldr	r0, [pc, #48]	@ (80004b8 <MX_GPIO_Init+0xfc>)
 8000486:	f000 fbcb 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800048a:	2301      	movs	r3, #1
 800048c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048e:	2301      	movs	r3, #1
 8000490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	2302      	movs	r3, #2
 8000498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	4619      	mov	r1, r3
 80004a0:	4806      	ldr	r0, [pc, #24]	@ (80004bc <MX_GPIO_Init+0x100>)
 80004a2:	f000 fbbd 	bl	8000c20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a6:	bf00      	nop
 80004a8:	3720      	adds	r7, #32
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40011000 	.word	0x40011000
 80004b8:	40010800 	.word	0x40010800
 80004bc:	40010c00 	.word	0x40010c00

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <Error_Handler+0x8>

080004cc <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 80004d6:	f107 020f 	add.w	r2, r7, #15
 80004da:	1df9      	adds	r1, r7, #7
 80004dc:	2364      	movs	r3, #100	@ 0x64
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	2301      	movs	r3, #1
 80004e2:	4804      	ldr	r0, [pc, #16]	@ (80004f4 <RC522_SPI_Transfer+0x28>)
 80004e4:	f001 f9cc 	bl	8001880 <HAL_SPI_TransmitReceive>

	return rx_data;
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000028 	.word	0x20000028

080004f8 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	460a      	mov	r2, r1
 8000502:	71fb      	strb	r3, [r7, #7]
 8000504:	4613      	mov	r3, r2
 8000506:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2110      	movs	r1, #16
 800050c:	480c      	ldr	r0, [pc, #48]	@ (8000540 <Write_MFRC522+0x48>)
 800050e:	f000 fd0b 	bl	8000f28 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	b2db      	uxtb	r3, r3
 8000518:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800051c:	b2db      	uxtb	r3, r3
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ffd4 	bl	80004cc <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000524:	79bb      	ldrb	r3, [r7, #6]
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff ffd0 	bl	80004cc <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2110      	movs	r1, #16
 8000530:	4803      	ldr	r0, [pc, #12]	@ (8000540 <Write_MFRC522+0x48>)
 8000532:	f000 fcf9 	bl	8000f28 <HAL_GPIO_WritePin>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40010800 	.word	0x40010800

08000544 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2110      	movs	r1, #16
 8000552:	480f      	ldr	r0, [pc, #60]	@ (8000590 <Read_MFRC522+0x4c>)
 8000554:	f000 fce8 	bl	8000f28 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	b25b      	sxtb	r3, r3
 800055e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000562:	b25b      	sxtb	r3, r3
 8000564:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000568:	b25b      	sxtb	r3, r3
 800056a:	b2db      	uxtb	r3, r3
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ffad 	bl	80004cc <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff ffaa 	bl	80004cc <RC522_SPI_Transfer>
 8000578:	4603      	mov	r3, r0
 800057a:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2110      	movs	r1, #16
 8000580:	4803      	ldr	r0, [pc, #12]	@ (8000590 <Read_MFRC522+0x4c>)
 8000582:	f000 fcd1 	bl	8000f28 <HAL_GPIO_WritePin>

	return val;
 8000586:	7bfb      	ldrb	r3, [r7, #15]

}
 8000588:	4618      	mov	r0, r3
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40010800 	.word	0x40010800

08000594 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ffcc 	bl	8000544 <Read_MFRC522>
 80005ac:	4603      	mov	r3, r0
 80005ae:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80005b0:	7bfa      	ldrb	r2, [r7, #15]
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	4611      	mov	r1, r2
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff9b 	bl	80004f8 <Write_MFRC522>
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 80005ce:	2014      	movs	r0, #20
 80005d0:	f7ff ffb8 	bl	8000544 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 80005d4:	2103      	movs	r1, #3
 80005d6:	2014      	movs	r0, #20
 80005d8:	f7ff ffdc 	bl	8000594 <SetBitMask>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80005e4:	210f      	movs	r1, #15
 80005e6:	2001      	movs	r0, #1
 80005e8:	f7ff ff86 	bl	80004f8 <Write_MFRC522>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2110      	movs	r1, #16
 80005f8:	4812      	ldr	r0, [pc, #72]	@ (8000644 <MFRC522_Init+0x54>)
 80005fa:	f000 fc95 	bl	8000f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2101      	movs	r1, #1
 8000602:	4811      	ldr	r0, [pc, #68]	@ (8000648 <MFRC522_Init+0x58>)
 8000604:	f000 fc90 	bl	8000f28 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000608:	f7ff ffea 	bl	80005e0 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800060c:	218d      	movs	r1, #141	@ 0x8d
 800060e:	202a      	movs	r0, #42	@ 0x2a
 8000610:	f7ff ff72 	bl	80004f8 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000614:	213e      	movs	r1, #62	@ 0x3e
 8000616:	202b      	movs	r0, #43	@ 0x2b
 8000618:	f7ff ff6e 	bl	80004f8 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 800061c:	211e      	movs	r1, #30
 800061e:	202d      	movs	r0, #45	@ 0x2d
 8000620:	f7ff ff6a 	bl	80004f8 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000624:	2100      	movs	r1, #0
 8000626:	202c      	movs	r0, #44	@ 0x2c
 8000628:	f7ff ff66 	bl	80004f8 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 800062c:	2140      	movs	r1, #64	@ 0x40
 800062e:	2015      	movs	r0, #21
 8000630:	f7ff ff62 	bl	80004f8 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000634:	213d      	movs	r1, #61	@ 0x3d
 8000636:	2011      	movs	r0, #17
 8000638:	f7ff ff5e 	bl	80004f8 <Write_MFRC522>

	AntennaOn();
 800063c:	f7ff ffc5 	bl	80005ca <AntennaOn>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40010800 	.word	0x40010800
 8000648:	40010c00 	.word	0x40010c00

0800064c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000652:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <HAL_MspInit+0x5c>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a14      	ldr	r2, [pc, #80]	@ (80006a8 <HAL_MspInit+0x5c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <HAL_MspInit+0x5c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <HAL_MspInit+0x5c>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a0e      	ldr	r2, [pc, #56]	@ (80006a8 <HAL_MspInit+0x5c>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <HAL_MspInit+0x5c>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000682:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <HAL_MspInit+0x60>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	4a04      	ldr	r2, [pc, #16]	@ (80006ac <HAL_MspInit+0x60>)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010000 	.word	0x40010000

080006b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000738 <HAL_SPI_MspInit+0x88>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d12f      	bne.n	8000730 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006d0:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <HAL_SPI_MspInit+0x8c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a19      	ldr	r2, [pc, #100]	@ (800073c <HAL_SPI_MspInit+0x8c>)
 80006d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b17      	ldr	r3, [pc, #92]	@ (800073c <HAL_SPI_MspInit+0x8c>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b14      	ldr	r3, [pc, #80]	@ (800073c <HAL_SPI_MspInit+0x8c>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a13      	ldr	r2, [pc, #76]	@ (800073c <HAL_SPI_MspInit+0x8c>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <HAL_SPI_MspInit+0x8c>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000700:	23a0      	movs	r3, #160	@ 0xa0
 8000702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000704:	2302      	movs	r3, #2
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000708:	2303      	movs	r3, #3
 800070a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	480b      	ldr	r0, [pc, #44]	@ (8000740 <HAL_SPI_MspInit+0x90>)
 8000714:	f000 fa84 	bl	8000c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000718:	2340      	movs	r3, #64	@ 0x40
 800071a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	4805      	ldr	r0, [pc, #20]	@ (8000740 <HAL_SPI_MspInit+0x90>)
 800072c:	f000 fa78 	bl	8000c20 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40013000 	.word	0x40013000
 800073c:	40021000 	.word	0x40021000
 8000740:	40010800 	.word	0x40010800

08000744 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000754:	d10b      	bne.n	800076e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <HAL_TIM_PWM_MspInit+0x34>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a07      	ldr	r2, [pc, #28]	@ (8000778 <HAL_TIM_PWM_MspInit+0x34>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <HAL_TIM_PWM_MspInit+0x34>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	40021000 	.word	0x40021000

0800077c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800079a:	d12a      	bne.n	80007f2 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <HAL_TIM_MspPostInit+0x80>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a16      	ldr	r2, [pc, #88]	@ (80007fc <HAL_TIM_MspPostInit+0x80>)
 80007a2:	f043 0304 	orr.w	r3, r3, #4
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <HAL_TIM_MspPostInit+0x80>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0304 	and.w	r3, r3, #4
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2302      	movs	r3, #2
 80007c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4619      	mov	r1, r3
 80007c8:	480d      	ldr	r0, [pc, #52]	@ (8000800 <HAL_TIM_MspPostInit+0x84>)
 80007ca:	f000 fa29 	bl	8000c20 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80007ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <HAL_TIM_MspPostInit+0x88>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	61fb      	str	r3, [r7, #28]
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80007e2:	61fb      	str	r3, [r7, #28]
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007ea:	61fb      	str	r3, [r7, #28]
 80007ec:	4a05      	ldr	r2, [pc, #20]	@ (8000804 <HAL_TIM_MspPostInit+0x88>)
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000
 8000800:	40010800 	.word	0x40010800
 8000804:	40010000 	.word	0x40010000

08000808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <HAL_UART_MspInit+0x88>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d12f      	bne.n	8000888 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000828:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <HAL_UART_MspInit+0x8c>)
 800082a:	69db      	ldr	r3, [r3, #28]
 800082c:	4a19      	ldr	r2, [pc, #100]	@ (8000894 <HAL_UART_MspInit+0x8c>)
 800082e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000832:	61d3      	str	r3, [r2, #28]
 8000834:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <HAL_UART_MspInit+0x8c>)
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <HAL_UART_MspInit+0x8c>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a13      	ldr	r2, [pc, #76]	@ (8000894 <HAL_UART_MspInit+0x8c>)
 8000846:	f043 0304 	orr.w	r3, r3, #4
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <HAL_UART_MspInit+0x8c>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000858:	2304      	movs	r3, #4
 800085a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4619      	mov	r1, r3
 800086a:	480b      	ldr	r0, [pc, #44]	@ (8000898 <HAL_UART_MspInit+0x90>)
 800086c:	f000 f9d8 	bl	8000c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000870:	2308      	movs	r3, #8
 8000872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <HAL_UART_MspInit+0x90>)
 8000884:	f000 f9cc 	bl	8000c20 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40004400 	.word	0x40004400
 8000894:	40021000 	.word	0x40021000
 8000898:	40010800 	.word	0x40010800

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <NMI_Handler+0x4>

080008a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <MemManage_Handler+0x4>

080008b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f874 	bl	80009d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000900:	f7ff fff8 	bl	80008f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480b      	ldr	r0, [pc, #44]	@ (8000934 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000906:	490c      	ldr	r1, [pc, #48]	@ (8000938 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000908:	4a0c      	ldr	r2, [pc, #48]	@ (800093c <LoopFillZerobss+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a09      	ldr	r2, [pc, #36]	@ (8000940 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800091c:	4c09      	ldr	r4, [pc, #36]	@ (8000944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f001 ff81 	bl	8002830 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092e:	f7ff fc0d 	bl	800014c <main>
  bx lr
 8000932:	4770      	bx	lr
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800093c:	080028c4 	.word	0x080028c4
  ldr r2, =_sbss
 8000940:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000944:	20000114 	.word	0x20000114

08000948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_2_IRQHandler>
	...

0800094c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000950:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <HAL_Init+0x28>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a07      	ldr	r2, [pc, #28]	@ (8000974 <HAL_Init+0x28>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 f92b 	bl	8000bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000962:	200f      	movs	r0, #15
 8000964:	f000 f808 	bl	8000978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000968:	f7ff fe70 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40022000 	.word	0x40022000

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <HAL_InitTick+0x54>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <HAL_InitTick+0x58>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800098e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000992:	fbb2 f3f3 	udiv	r3, r2, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f935 	bl	8000c06 <HAL_SYSTICK_Config>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00e      	b.n	80009c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d80a      	bhi.n	80009c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009b4:	f000 f90b 	bl	8000bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b8:	4a06      	ldr	r2, [pc, #24]	@ (80009d4 <HAL_InitTick+0x5c>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
 80009c0:	e000      	b.n	80009c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000004 	.word	0x20000004

080009d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009dc:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <HAL_IncTick+0x1c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <HAL_IncTick+0x20>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a03      	ldr	r2, [pc, #12]	@ (80009f8 <HAL_IncTick+0x20>)
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000110 	.word	0x20000110

080009fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b02      	ldr	r3, [pc, #8]	@ (8000a0c <HAL_GetTick+0x10>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	20000110 	.word	0x20000110

08000a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a18:	f7ff fff0 	bl	80009fc <HAL_GetTick>
 8000a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a28:	d005      	beq.n	8000a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <HAL_Delay+0x44>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4413      	add	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a36:	bf00      	nop
 8000a38:	f7ff ffe0 	bl	80009fc <HAL_GetTick>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d8f7      	bhi.n	8000a38 <HAL_Delay+0x28>
  {
  }
}
 8000a48:	bf00      	nop
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000008 	.word	0x20000008

08000a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a74:	4013      	ands	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8a:	4a04      	ldr	r2, [pc, #16]	@ (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	60d3      	str	r3, [r2, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa4:	4b04      	ldr	r3, [pc, #16]	@ (8000ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	f003 0307 	and.w	r3, r3, #7
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	db0a      	blt.n	8000ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	490c      	ldr	r1, [pc, #48]	@ (8000b08 <__NVIC_SetPriority+0x4c>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	440b      	add	r3, r1
 8000ae0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae4:	e00a      	b.n	8000afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4908      	ldr	r1, [pc, #32]	@ (8000b0c <__NVIC_SetPriority+0x50>)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	f003 030f 	and.w	r3, r3, #15
 8000af2:	3b04      	subs	r3, #4
 8000af4:	0112      	lsls	r2, r2, #4
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	440b      	add	r3, r1
 8000afa:	761a      	strb	r2, [r3, #24]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	@ 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	f1c3 0307 	rsb	r3, r3, #7
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	bf28      	it	cs
 8000b2e:	2304      	movcs	r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3304      	adds	r3, #4
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	d902      	bls.n	8000b40 <NVIC_EncodePriority+0x30>
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3b03      	subs	r3, #3
 8000b3e:	e000      	b.n	8000b42 <NVIC_EncodePriority+0x32>
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	43d9      	mvns	r1, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	4313      	orrs	r3, r2
         );
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3724      	adds	r7, #36	@ 0x24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b84:	d301      	bcc.n	8000b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00f      	b.n	8000baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <SysTick_Config+0x40>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b92:	210f      	movs	r1, #15
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b98:	f7ff ff90 	bl	8000abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b9c:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <SysTick_Config+0x40>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba2:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <SysTick_Config+0x40>)
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	e000e010 	.word	0xe000e010

08000bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff49 	bl	8000a58 <__NVIC_SetPriorityGrouping>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be0:	f7ff ff5e 	bl	8000aa0 <__NVIC_GetPriorityGrouping>
 8000be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	68b9      	ldr	r1, [r7, #8]
 8000bea:	6978      	ldr	r0, [r7, #20]
 8000bec:	f7ff ff90 	bl	8000b10 <NVIC_EncodePriority>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff5f 	bl	8000abc <__NVIC_SetPriority>
}
 8000bfe:	bf00      	nop
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ffb0 	bl	8000b74 <SysTick_Config>
 8000c14:	4603      	mov	r3, r0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b08b      	sub	sp, #44	@ 0x2c
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c32:	e169      	b.n	8000f08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c34:	2201      	movs	r2, #1
 8000c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	f040 8158 	bne.w	8000f02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	4a9a      	ldr	r2, [pc, #616]	@ (8000ec0 <HAL_GPIO_Init+0x2a0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d05e      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c5c:	4a98      	ldr	r2, [pc, #608]	@ (8000ec0 <HAL_GPIO_Init+0x2a0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d875      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c62:	4a98      	ldr	r2, [pc, #608]	@ (8000ec4 <HAL_GPIO_Init+0x2a4>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d058      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c68:	4a96      	ldr	r2, [pc, #600]	@ (8000ec4 <HAL_GPIO_Init+0x2a4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d86f      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c6e:	4a96      	ldr	r2, [pc, #600]	@ (8000ec8 <HAL_GPIO_Init+0x2a8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d052      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c74:	4a94      	ldr	r2, [pc, #592]	@ (8000ec8 <HAL_GPIO_Init+0x2a8>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d869      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c7a:	4a94      	ldr	r2, [pc, #592]	@ (8000ecc <HAL_GPIO_Init+0x2ac>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d04c      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c80:	4a92      	ldr	r2, [pc, #584]	@ (8000ecc <HAL_GPIO_Init+0x2ac>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d863      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c86:	4a92      	ldr	r2, [pc, #584]	@ (8000ed0 <HAL_GPIO_Init+0x2b0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d046      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c8c:	4a90      	ldr	r2, [pc, #576]	@ (8000ed0 <HAL_GPIO_Init+0x2b0>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d85d      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c92:	2b12      	cmp	r3, #18
 8000c94:	d82a      	bhi.n	8000cec <HAL_GPIO_Init+0xcc>
 8000c96:	2b12      	cmp	r3, #18
 8000c98:	d859      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8000ca0 <HAL_GPIO_Init+0x80>)
 8000c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca0:	08000d1b 	.word	0x08000d1b
 8000ca4:	08000cf5 	.word	0x08000cf5
 8000ca8:	08000d07 	.word	0x08000d07
 8000cac:	08000d49 	.word	0x08000d49
 8000cb0:	08000d4f 	.word	0x08000d4f
 8000cb4:	08000d4f 	.word	0x08000d4f
 8000cb8:	08000d4f 	.word	0x08000d4f
 8000cbc:	08000d4f 	.word	0x08000d4f
 8000cc0:	08000d4f 	.word	0x08000d4f
 8000cc4:	08000d4f 	.word	0x08000d4f
 8000cc8:	08000d4f 	.word	0x08000d4f
 8000ccc:	08000d4f 	.word	0x08000d4f
 8000cd0:	08000d4f 	.word	0x08000d4f
 8000cd4:	08000d4f 	.word	0x08000d4f
 8000cd8:	08000d4f 	.word	0x08000d4f
 8000cdc:	08000d4f 	.word	0x08000d4f
 8000ce0:	08000d4f 	.word	0x08000d4f
 8000ce4:	08000cfd 	.word	0x08000cfd
 8000ce8:	08000d11 	.word	0x08000d11
 8000cec:	4a79      	ldr	r2, [pc, #484]	@ (8000ed4 <HAL_GPIO_Init+0x2b4>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d013      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cf2:	e02c      	b.n	8000d4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	623b      	str	r3, [r7, #32]
          break;
 8000cfa:	e029      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	3304      	adds	r3, #4
 8000d02:	623b      	str	r3, [r7, #32]
          break;
 8000d04:	e024      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	3308      	adds	r3, #8
 8000d0c:	623b      	str	r3, [r7, #32]
          break;
 8000d0e:	e01f      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	330c      	adds	r3, #12
 8000d16:	623b      	str	r3, [r7, #32]
          break;
 8000d18:	e01a      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d102      	bne.n	8000d28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d22:	2304      	movs	r3, #4
 8000d24:	623b      	str	r3, [r7, #32]
          break;
 8000d26:	e013      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d105      	bne.n	8000d3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d30:	2308      	movs	r3, #8
 8000d32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	611a      	str	r2, [r3, #16]
          break;
 8000d3a:	e009      	b.n	8000d50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69fa      	ldr	r2, [r7, #28]
 8000d44:	615a      	str	r2, [r3, #20]
          break;
 8000d46:	e003      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
          break;
 8000d4c:	e000      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          break;
 8000d4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2bff      	cmp	r3, #255	@ 0xff
 8000d54:	d801      	bhi.n	8000d5a <HAL_GPIO_Init+0x13a>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	e001      	b.n	8000d5e <HAL_GPIO_Init+0x13e>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	2bff      	cmp	r3, #255	@ 0xff
 8000d64:	d802      	bhi.n	8000d6c <HAL_GPIO_Init+0x14c>
 8000d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	e002      	b.n	8000d72 <HAL_GPIO_Init+0x152>
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6e:	3b08      	subs	r3, #8
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	210f      	movs	r1, #15
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	401a      	ands	r2, r3
 8000d84:	6a39      	ldr	r1, [r7, #32]
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 80b1 	beq.w	8000f02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000da0:	4b4d      	ldr	r3, [pc, #308]	@ (8000ed8 <HAL_GPIO_Init+0x2b8>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a4c      	ldr	r2, [pc, #304]	@ (8000ed8 <HAL_GPIO_Init+0x2b8>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b4a      	ldr	r3, [pc, #296]	@ (8000ed8 <HAL_GPIO_Init+0x2b8>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000db8:	4a48      	ldr	r2, [pc, #288]	@ (8000edc <HAL_GPIO_Init+0x2bc>)
 8000dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a40      	ldr	r2, [pc, #256]	@ (8000ee0 <HAL_GPIO_Init+0x2c0>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d013      	beq.n	8000e0c <HAL_GPIO_Init+0x1ec>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ee4 <HAL_GPIO_Init+0x2c4>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d00d      	beq.n	8000e08 <HAL_GPIO_Init+0x1e8>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a3e      	ldr	r2, [pc, #248]	@ (8000ee8 <HAL_GPIO_Init+0x2c8>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d007      	beq.n	8000e04 <HAL_GPIO_Init+0x1e4>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a3d      	ldr	r2, [pc, #244]	@ (8000eec <HAL_GPIO_Init+0x2cc>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d101      	bne.n	8000e00 <HAL_GPIO_Init+0x1e0>
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e006      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e00:	2304      	movs	r3, #4
 8000e02:	e004      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e04:	2302      	movs	r3, #2
 8000e06:	e002      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e000      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e10:	f002 0203 	and.w	r2, r2, #3
 8000e14:	0092      	lsls	r2, r2, #2
 8000e16:	4093      	lsls	r3, r2
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e1e:	492f      	ldr	r1, [pc, #188]	@ (8000edc <HAL_GPIO_Init+0x2bc>)
 8000e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	3302      	adds	r3, #2
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d006      	beq.n	8000e46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e38:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	492c      	ldr	r1, [pc, #176]	@ (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	608b      	str	r3, [r1, #8]
 8000e44:	e006      	b.n	8000e54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e46:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	4928      	ldr	r1, [pc, #160]	@ (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d006      	beq.n	8000e6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e60:	4b23      	ldr	r3, [pc, #140]	@ (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	4922      	ldr	r1, [pc, #136]	@ (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	60cb      	str	r3, [r1, #12]
 8000e6c:	e006      	b.n	8000e7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	491e      	ldr	r1, [pc, #120]	@ (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d006      	beq.n	8000e96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e88:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	4918      	ldr	r1, [pc, #96]	@ (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	604b      	str	r3, [r1, #4]
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e96:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	4914      	ldr	r1, [pc, #80]	@ (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d021      	beq.n	8000ef4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	490e      	ldr	r1, [pc, #56]	@ (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]
 8000ebc:	e021      	b.n	8000f02 <HAL_GPIO_Init+0x2e2>
 8000ebe:	bf00      	nop
 8000ec0:	10320000 	.word	0x10320000
 8000ec4:	10310000 	.word	0x10310000
 8000ec8:	10220000 	.word	0x10220000
 8000ecc:	10210000 	.word	0x10210000
 8000ed0:	10120000 	.word	0x10120000
 8000ed4:	10110000 	.word	0x10110000
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010000 	.word	0x40010000
 8000ee0:	40010800 	.word	0x40010800
 8000ee4:	40010c00 	.word	0x40010c00
 8000ee8:	40011000 	.word	0x40011000
 8000eec:	40011400 	.word	0x40011400
 8000ef0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <HAL_GPIO_Init+0x304>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	4909      	ldr	r1, [pc, #36]	@ (8000f24 <HAL_GPIO_Init+0x304>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f04:	3301      	adds	r3, #1
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f47f ae8e 	bne.w	8000c34 <HAL_GPIO_Init+0x14>
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	372c      	adds	r7, #44	@ 0x2c
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	40010400 	.word	0x40010400

08000f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
 8000f34:	4613      	mov	r3, r2
 8000f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f38:	787b      	ldrb	r3, [r7, #1]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f3e:	887a      	ldrh	r2, [r7, #2]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f44:	e003      	b.n	8000f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	041a      	lsls	r2, r3, #16
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	611a      	str	r2, [r3, #16]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e272      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 8087 	beq.w	8001086 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f78:	4b92      	ldr	r3, [pc, #584]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d00c      	beq.n	8000f9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f84:	4b8f      	ldr	r3, [pc, #572]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d112      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x5e>
 8000f90:	4b8c      	ldr	r3, [pc, #560]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f9c:	d10b      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9e:	4b89      	ldr	r3, [pc, #548]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d06c      	beq.n	8001084 <HAL_RCC_OscConfig+0x12c>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d168      	bne.n	8001084 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e24c      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fbe:	d106      	bne.n	8000fce <HAL_RCC_OscConfig+0x76>
 8000fc0:	4b80      	ldr	r3, [pc, #512]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a7f      	ldr	r2, [pc, #508]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	e02e      	b.n	800102c <HAL_RCC_OscConfig+0xd4>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10c      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x98>
 8000fd6:	4b7b      	ldr	r3, [pc, #492]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a7a      	ldr	r2, [pc, #488]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	4b78      	ldr	r3, [pc, #480]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a77      	ldr	r2, [pc, #476]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e01d      	b.n	800102c <HAL_RCC_OscConfig+0xd4>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ff8:	d10c      	bne.n	8001014 <HAL_RCC_OscConfig+0xbc>
 8000ffa:	4b72      	ldr	r3, [pc, #456]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a71      	ldr	r2, [pc, #452]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4b6f      	ldr	r3, [pc, #444]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a6e      	ldr	r2, [pc, #440]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 800100c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e00b      	b.n	800102c <HAL_RCC_OscConfig+0xd4>
 8001014:	4b6b      	ldr	r3, [pc, #428]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a6a      	ldr	r2, [pc, #424]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 800101a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b68      	ldr	r3, [pc, #416]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a67      	ldr	r2, [pc, #412]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001026:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800102a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d013      	beq.n	800105c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001034:	f7ff fce2 	bl	80009fc <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff fcde 	bl	80009fc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	@ 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e200      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	4b5d      	ldr	r3, [pc, #372]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0xe4>
 800105a:	e014      	b.n	8001086 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff fcce 	bl	80009fc <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001064:	f7ff fcca 	bl	80009fc <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b64      	cmp	r3, #100	@ 0x64
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e1ec      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	4b53      	ldr	r3, [pc, #332]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <HAL_RCC_OscConfig+0x10c>
 8001082:	e000      	b.n	8001086 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d063      	beq.n	800115a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001092:	4b4c      	ldr	r3, [pc, #304]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00b      	beq.n	80010b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800109e:	4b49      	ldr	r3, [pc, #292]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b08      	cmp	r3, #8
 80010a8:	d11c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x18c>
 80010aa:	4b46      	ldr	r3, [pc, #280]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d116      	bne.n	80010e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b6:	4b43      	ldr	r3, [pc, #268]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d005      	beq.n	80010ce <HAL_RCC_OscConfig+0x176>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d001      	beq.n	80010ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e1c0      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ce:	4b3d      	ldr	r3, [pc, #244]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4939      	ldr	r1, [pc, #228]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e2:	e03a      	b.n	800115a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d020      	beq.n	800112e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ec:	4b36      	ldr	r3, [pc, #216]	@ (80011c8 <HAL_RCC_OscConfig+0x270>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f2:	f7ff fc83 	bl	80009fc <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fa:	f7ff fc7f 	bl	80009fc <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e1a1      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	4b2d      	ldr	r3, [pc, #180]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f0      	beq.n	80010fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001118:	4b2a      	ldr	r3, [pc, #168]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4927      	ldr	r1, [pc, #156]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
 800112c:	e015      	b.n	800115a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800112e:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <HAL_RCC_OscConfig+0x270>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fc62 	bl	80009fc <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800113c:	f7ff fc5e 	bl	80009fc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e180      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114e:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d03a      	beq.n	80011dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d019      	beq.n	80011a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800116e:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <HAL_RCC_OscConfig+0x274>)
 8001170:	2201      	movs	r2, #1
 8001172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001174:	f7ff fc42 	bl	80009fc <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117c:	f7ff fc3e 	bl	80009fc <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e160      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f000 face 	bl	800173c <RCC_Delay>
 80011a0:	e01c      	b.n	80011dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011a2:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <HAL_RCC_OscConfig+0x274>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a8:	f7ff fc28 	bl	80009fc <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ae:	e00f      	b.n	80011d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b0:	f7ff fc24 	bl	80009fc <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d908      	bls.n	80011d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e146      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	42420000 	.word	0x42420000
 80011cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d0:	4b92      	ldr	r3, [pc, #584]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e9      	bne.n	80011b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80a6 	beq.w	8001336 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ee:	4b8b      	ldr	r3, [pc, #556]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10d      	bne.n	8001216 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b88      	ldr	r3, [pc, #544]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a87      	ldr	r2, [pc, #540]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001204:	61d3      	str	r3, [r2, #28]
 8001206:	4b85      	ldr	r3, [pc, #532]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001212:	2301      	movs	r3, #1
 8001214:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001216:	4b82      	ldr	r3, [pc, #520]	@ (8001420 <HAL_RCC_OscConfig+0x4c8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800121e:	2b00      	cmp	r3, #0
 8001220:	d118      	bne.n	8001254 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001222:	4b7f      	ldr	r3, [pc, #508]	@ (8001420 <HAL_RCC_OscConfig+0x4c8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a7e      	ldr	r2, [pc, #504]	@ (8001420 <HAL_RCC_OscConfig+0x4c8>)
 8001228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800122c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800122e:	f7ff fbe5 	bl	80009fc <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001236:	f7ff fbe1 	bl	80009fc <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b64      	cmp	r3, #100	@ 0x64
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e103      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001248:	4b75      	ldr	r3, [pc, #468]	@ (8001420 <HAL_RCC_OscConfig+0x4c8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f0      	beq.n	8001236 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d106      	bne.n	800126a <HAL_RCC_OscConfig+0x312>
 800125c:	4b6f      	ldr	r3, [pc, #444]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4a6e      	ldr	r2, [pc, #440]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6213      	str	r3, [r2, #32]
 8001268:	e02d      	b.n	80012c6 <HAL_RCC_OscConfig+0x36e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0x334>
 8001272:	4b6a      	ldr	r3, [pc, #424]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	4a69      	ldr	r2, [pc, #420]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001278:	f023 0301 	bic.w	r3, r3, #1
 800127c:	6213      	str	r3, [r2, #32]
 800127e:	4b67      	ldr	r3, [pc, #412]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4a66      	ldr	r2, [pc, #408]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001284:	f023 0304 	bic.w	r3, r3, #4
 8001288:	6213      	str	r3, [r2, #32]
 800128a:	e01c      	b.n	80012c6 <HAL_RCC_OscConfig+0x36e>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b05      	cmp	r3, #5
 8001292:	d10c      	bne.n	80012ae <HAL_RCC_OscConfig+0x356>
 8001294:	4b61      	ldr	r3, [pc, #388]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4a60      	ldr	r2, [pc, #384]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	6213      	str	r3, [r2, #32]
 80012a0:	4b5e      	ldr	r3, [pc, #376]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4a5d      	ldr	r2, [pc, #372]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6213      	str	r3, [r2, #32]
 80012ac:	e00b      	b.n	80012c6 <HAL_RCC_OscConfig+0x36e>
 80012ae:	4b5b      	ldr	r3, [pc, #364]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	4a5a      	ldr	r2, [pc, #360]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	f023 0301 	bic.w	r3, r3, #1
 80012b8:	6213      	str	r3, [r2, #32]
 80012ba:	4b58      	ldr	r3, [pc, #352]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4a57      	ldr	r2, [pc, #348]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	f023 0304 	bic.w	r3, r3, #4
 80012c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d015      	beq.n	80012fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fb95 	bl	80009fc <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d4:	e00a      	b.n	80012ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d6:	f7ff fb91 	bl	80009fc <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e0b1      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ec:	4b4b      	ldr	r3, [pc, #300]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0ee      	beq.n	80012d6 <HAL_RCC_OscConfig+0x37e>
 80012f8:	e014      	b.n	8001324 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fa:	f7ff fb7f 	bl	80009fc <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001302:	f7ff fb7b 	bl	80009fc <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001310:	4293      	cmp	r3, r2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e09b      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001318:	4b40      	ldr	r3, [pc, #256]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1ee      	bne.n	8001302 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d105      	bne.n	8001336 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800132a:	4b3c      	ldr	r3, [pc, #240]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a3b      	ldr	r2, [pc, #236]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001330:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001334:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 8087 	beq.w	800144e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001340:	4b36      	ldr	r3, [pc, #216]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	2b08      	cmp	r3, #8
 800134a:	d061      	beq.n	8001410 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d146      	bne.n	80013e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001354:	4b33      	ldr	r3, [pc, #204]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff fb4f 	bl	80009fc <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001362:	f7ff fb4b 	bl	80009fc <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e06d      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001374:	4b29      	ldr	r3, [pc, #164]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f0      	bne.n	8001362 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001388:	d108      	bne.n	800139c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800138a:	4b24      	ldr	r3, [pc, #144]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	4921      	ldr	r1, [pc, #132]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800139c:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a19      	ldr	r1, [r3, #32]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ac:	430b      	orrs	r3, r1
 80013ae:	491b      	ldr	r1, [pc, #108]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff fb1f 	bl	80009fc <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff fb1b 	bl	80009fc <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e03d      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x46a>
 80013e0:	e035      	b.n	800144e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb08 	bl	80009fc <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff fb04 	bl	80009fc <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e026      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x498>
 800140e:	e01e      	b.n	800144e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d107      	bne.n	8001428 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e019      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
 800141c:	40021000 	.word	0x40021000
 8001420:	40007000 	.word	0x40007000
 8001424:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001428:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <HAL_RCC_OscConfig+0x500>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	429a      	cmp	r2, r3
 800143a:	d106      	bne.n	800144a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001446:	429a      	cmp	r2, r3
 8001448:	d001      	beq.n	800144e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021000 	.word	0x40021000

0800145c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0d0      	b.n	8001612 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001470:	4b6a      	ldr	r3, [pc, #424]	@ (800161c <HAL_RCC_ClockConfig+0x1c0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d910      	bls.n	80014a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147e:	4b67      	ldr	r3, [pc, #412]	@ (800161c <HAL_RCC_ClockConfig+0x1c0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 0207 	bic.w	r2, r3, #7
 8001486:	4965      	ldr	r1, [pc, #404]	@ (800161c <HAL_RCC_ClockConfig+0x1c0>)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800148e:	4b63      	ldr	r3, [pc, #396]	@ (800161c <HAL_RCC_ClockConfig+0x1c0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0b8      	b.n	8001612 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d020      	beq.n	80014ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b8:	4b59      	ldr	r3, [pc, #356]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a58      	ldr	r2, [pc, #352]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014d0:	4b53      	ldr	r3, [pc, #332]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a52      	ldr	r2, [pc, #328]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80014da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014dc:	4b50      	ldr	r3, [pc, #320]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	494d      	ldr	r1, [pc, #308]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d040      	beq.n	800157c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d107      	bne.n	8001512 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001502:	4b47      	ldr	r3, [pc, #284]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d115      	bne.n	800153a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e07f      	b.n	8001612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151a:	4b41      	ldr	r3, [pc, #260]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d109      	bne.n	800153a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e073      	b.n	8001612 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152a:	4b3d      	ldr	r3, [pc, #244]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e06b      	b.n	8001612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800153a:	4b39      	ldr	r3, [pc, #228]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f023 0203 	bic.w	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4936      	ldr	r1, [pc, #216]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800154c:	f7ff fa56 	bl	80009fc <HAL_GetTick>
 8001550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001552:	e00a      	b.n	800156a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001554:	f7ff fa52 	bl	80009fc <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001562:	4293      	cmp	r3, r2
 8001564:	d901      	bls.n	800156a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e053      	b.n	8001612 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	4b2d      	ldr	r3, [pc, #180]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 020c 	and.w	r2, r3, #12
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	429a      	cmp	r2, r3
 800157a:	d1eb      	bne.n	8001554 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800157c:	4b27      	ldr	r3, [pc, #156]	@ (800161c <HAL_RCC_ClockConfig+0x1c0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d210      	bcs.n	80015ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	4b24      	ldr	r3, [pc, #144]	@ (800161c <HAL_RCC_ClockConfig+0x1c0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 0207 	bic.w	r2, r3, #7
 8001592:	4922      	ldr	r1, [pc, #136]	@ (800161c <HAL_RCC_ClockConfig+0x1c0>)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800159a:	4b20      	ldr	r3, [pc, #128]	@ (800161c <HAL_RCC_ClockConfig+0x1c0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e032      	b.n	8001612 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d008      	beq.n	80015ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b8:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	4916      	ldr	r1, [pc, #88]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d009      	beq.n	80015ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015d6:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	490e      	ldr	r1, [pc, #56]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ea:	f000 f821 	bl	8001630 <HAL_RCC_GetSysClockFreq>
 80015ee:	4602      	mov	r2, r0
 80015f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	490a      	ldr	r1, [pc, #40]	@ (8001624 <HAL_RCC_ClockConfig+0x1c8>)
 80015fc:	5ccb      	ldrb	r3, [r1, r3]
 80015fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001602:	4a09      	ldr	r2, [pc, #36]	@ (8001628 <HAL_RCC_ClockConfig+0x1cc>)
 8001604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <HAL_RCC_ClockConfig+0x1d0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff f9b4 	bl	8000978 <HAL_InitTick>

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40022000 	.word	0x40022000
 8001620:	40021000 	.word	0x40021000
 8001624:	08002890 	.word	0x08002890
 8001628:	20000000 	.word	0x20000000
 800162c:	20000004 	.word	0x20000004

08001630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800164a:	4b1e      	ldr	r3, [pc, #120]	@ (80016c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b04      	cmp	r3, #4
 8001658:	d002      	beq.n	8001660 <HAL_RCC_GetSysClockFreq+0x30>
 800165a:	2b08      	cmp	r3, #8
 800165c:	d003      	beq.n	8001666 <HAL_RCC_GetSysClockFreq+0x36>
 800165e:	e027      	b.n	80016b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001660:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001662:	613b      	str	r3, [r7, #16]
      break;
 8001664:	e027      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	0c9b      	lsrs	r3, r3, #18
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	4a17      	ldr	r2, [pc, #92]	@ (80016cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d010      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	0c5b      	lsrs	r3, r3, #17
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	4a11      	ldr	r2, [pc, #68]	@ (80016d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a0d      	ldr	r2, [pc, #52]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001692:	fb03 f202 	mul.w	r2, r3, r2
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	fbb2 f3f3 	udiv	r3, r2, r3
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e004      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a0c      	ldr	r2, [pc, #48]	@ (80016d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016a4:	fb02 f303 	mul.w	r3, r2, r3
 80016a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	613b      	str	r3, [r7, #16]
      break;
 80016ae:	e002      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80016b2:	613b      	str	r3, [r7, #16]
      break;
 80016b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016b6:	693b      	ldr	r3, [r7, #16]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	371c      	adds	r7, #28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
 80016c8:	007a1200 	.word	0x007a1200
 80016cc:	080028a8 	.word	0x080028a8
 80016d0:	080028b8 	.word	0x080028b8
 80016d4:	003d0900 	.word	0x003d0900

080016d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016dc:	4b02      	ldr	r3, [pc, #8]	@ (80016e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	20000000 	.word	0x20000000

080016ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016f0:	f7ff fff2 	bl	80016d8 <HAL_RCC_GetHCLKFreq>
 80016f4:	4602      	mov	r2, r0
 80016f6:	4b05      	ldr	r3, [pc, #20]	@ (800170c <HAL_RCC_GetPCLK1Freq+0x20>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	4903      	ldr	r1, [pc, #12]	@ (8001710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001702:	5ccb      	ldrb	r3, [r1, r3]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001708:	4618      	mov	r0, r3
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40021000 	.word	0x40021000
 8001710:	080028a0 	.word	0x080028a0

08001714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001718:	f7ff ffde 	bl	80016d8 <HAL_RCC_GetHCLKFreq>
 800171c:	4602      	mov	r2, r0
 800171e:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	0adb      	lsrs	r3, r3, #11
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	4903      	ldr	r1, [pc, #12]	@ (8001738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800172a:	5ccb      	ldrb	r3, [r1, r3]
 800172c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	080028a0 	.word	0x080028a0

0800173c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001744:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <RCC_Delay+0x34>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <RCC_Delay+0x38>)
 800174a:	fba2 2303 	umull	r2, r3, r2, r3
 800174e:	0a5b      	lsrs	r3, r3, #9
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	fb02 f303 	mul.w	r3, r2, r3
 8001756:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001758:	bf00      	nop
  }
  while (Delay --);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1e5a      	subs	r2, r3, #1
 800175e:	60fa      	str	r2, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f9      	bne.n	8001758 <RCC_Delay+0x1c>
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	20000000 	.word	0x20000000
 8001774:	10624dd3 	.word	0x10624dd3

08001778 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e076      	b.n	8001878 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178e:	2b00      	cmp	r3, #0
 8001790:	d108      	bne.n	80017a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800179a:	d009      	beq.n	80017b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
 80017a2:	e005      	b.n	80017b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d106      	bne.n	80017d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7fe ff70 	bl	80006b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2202      	movs	r2, #2
 80017d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80017e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001834:	ea42 0103 	orr.w	r1, r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	0c1a      	lsrs	r2, r3, #16
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f002 0204 	and.w	r2, r2, #4
 8001856:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	69da      	ldr	r2, [r3, #28]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001866:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	@ 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800188e:	2301      	movs	r3, #1
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001892:	f7ff f8b3 	bl	80009fc <HAL_GetTick>
 8001896:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800189e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80018aa:	7ffb      	ldrb	r3, [r7, #31]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d00c      	beq.n	80018ca <HAL_SPI_TransmitReceive+0x4a>
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80018b6:	d106      	bne.n	80018c6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d102      	bne.n	80018c6 <HAL_SPI_TransmitReceive+0x46>
 80018c0:	7ffb      	ldrb	r3, [r7, #31]
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d001      	beq.n	80018ca <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80018c6:	2302      	movs	r3, #2
 80018c8:	e17f      	b.n	8001bca <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_SPI_TransmitReceive+0x5c>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <HAL_SPI_TransmitReceive+0x5c>
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e174      	b.n	8001bca <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_SPI_TransmitReceive+0x6e>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e16d      	b.n	8001bca <HAL_SPI_TransmitReceive+0x34a>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d003      	beq.n	800190a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2205      	movs	r2, #5
 8001906:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	887a      	ldrh	r2, [r7, #2]
 800191a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	887a      	ldrh	r2, [r7, #2]
 8001932:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800194a:	2b40      	cmp	r3, #64	@ 0x40
 800194c:	d007      	beq.n	800195e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001966:	d17e      	bne.n	8001a66 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <HAL_SPI_TransmitReceive+0xf6>
 8001970:	8afb      	ldrh	r3, [r7, #22]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d16c      	bne.n	8001a50 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	881a      	ldrh	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	1c9a      	adds	r2, r3, #2
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001990:	b29b      	uxth	r3, r3
 8001992:	3b01      	subs	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800199a:	e059      	b.n	8001a50 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d11b      	bne.n	80019e2 <HAL_SPI_TransmitReceive+0x162>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d016      	beq.n	80019e2 <HAL_SPI_TransmitReceive+0x162>
 80019b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d113      	bne.n	80019e2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	881a      	ldrh	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	1c9a      	adds	r2, r3, #2
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d119      	bne.n	8001a24 <HAL_SPI_TransmitReceive+0x1a4>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d014      	beq.n	8001a24 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a04:	b292      	uxth	r2, r2
 8001a06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a0c:	1c9a      	adds	r2, r3, #2
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001a20:	2301      	movs	r3, #1
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001a24:	f7fe ffea 	bl	80009fc <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d80d      	bhi.n	8001a50 <HAL_SPI_TransmitReceive+0x1d0>
 8001a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a3a:	d009      	beq.n	8001a50 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e0bc      	b.n	8001bca <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1a0      	bne.n	800199c <HAL_SPI_TransmitReceive+0x11c>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d19b      	bne.n	800199c <HAL_SPI_TransmitReceive+0x11c>
 8001a64:	e082      	b.n	8001b6c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_SPI_TransmitReceive+0x1f4>
 8001a6e:	8afb      	ldrh	r3, [r7, #22]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d171      	bne.n	8001b58 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	330c      	adds	r3, #12
 8001a7e:	7812      	ldrb	r2, [r2, #0]
 8001a80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	3b01      	subs	r3, #1
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a9a:	e05d      	b.n	8001b58 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d11c      	bne.n	8001ae4 <HAL_SPI_TransmitReceive+0x264>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d017      	beq.n	8001ae4 <HAL_SPI_TransmitReceive+0x264>
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d114      	bne.n	8001ae4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	330c      	adds	r3, #12
 8001ac4:	7812      	ldrb	r2, [r2, #0]
 8001ac6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d119      	bne.n	8001b26 <HAL_SPI_TransmitReceive+0x2a6>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d014      	beq.n	8001b26 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b22:	2301      	movs	r3, #1
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001b26:	f7fe ff69 	bl	80009fc <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d803      	bhi.n	8001b3e <HAL_SPI_TransmitReceive+0x2be>
 8001b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b3c:	d102      	bne.n	8001b44 <HAL_SPI_TransmitReceive+0x2c4>
 8001b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d109      	bne.n	8001b58 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e038      	b.n	8001bca <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d19c      	bne.n	8001a9c <HAL_SPI_TransmitReceive+0x21c>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d197      	bne.n	8001a9c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b6c:	6a3a      	ldr	r2, [r7, #32]
 8001b6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 f8b7 	bl	8001ce4 <SPI_EndRxTxTransaction>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e01d      	b.n	8001bca <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10a      	bne.n	8001bac <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
  }
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3728      	adds	r7, #40	@ 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	4613      	mov	r3, r2
 8001be2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001be4:	f7fe ff0a 	bl	80009fc <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001bf4:	f7fe ff02 	bl	80009fc <HAL_GetTick>
 8001bf8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001bfa:	4b39      	ldr	r3, [pc, #228]	@ (8001ce0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	015b      	lsls	r3, r3, #5
 8001c00:	0d1b      	lsrs	r3, r3, #20
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	fb02 f303 	mul.w	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c0a:	e054      	b.n	8001cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c12:	d050      	beq.n	8001cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c14:	f7fe fef2 	bl	80009fc <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d902      	bls.n	8001c2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d13d      	bne.n	8001ca6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001c38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c42:	d111      	bne.n	8001c68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c4c:	d004      	beq.n	8001c58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c56:	d107      	bne.n	8001c68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c70:	d10f      	bne.n	8001c92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e017      	b.n	8001cd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	bf0c      	ite	eq
 8001cc6:	2301      	moveq	r3, #1
 8001cc8:	2300      	movne	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d19b      	bne.n	8001c0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3720      	adds	r7, #32
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000000 	.word	0x20000000

08001ce4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f7ff ff6a 	bl	8001bd4 <SPI_WaitFlagStateUntilTimeout>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0a:	f043 0220 	orr.w	r2, r3, #32
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e013      	b.n	8001d3e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2180      	movs	r1, #128	@ 0x80
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f7ff ff57 	bl	8001bd4 <SPI_WaitFlagStateUntilTimeout>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d007      	beq.n	8001d3c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d30:	f043 0220 	orr.w	r2, r3, #32
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e000      	b.n	8001d3e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e041      	b.n	8001ddc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d106      	bne.n	8001d72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7fe fce9 	bl	8000744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2202      	movs	r2, #2
 8001d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3304      	adds	r3, #4
 8001d82:	4619      	mov	r1, r3
 8001d84:	4610      	mov	r0, r2
 8001d86:	f000 f9f5 	bl	8002174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HAL_TIM_PWM_Start+0x24>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	bf14      	ite	ne
 8001e00:	2301      	movne	r3, #1
 8001e02:	2300      	moveq	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	e022      	b.n	8001e4e <HAL_TIM_PWM_Start+0x6a>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d109      	bne.n	8001e22 <HAL_TIM_PWM_Start+0x3e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	bf14      	ite	ne
 8001e1a:	2301      	movne	r3, #1
 8001e1c:	2300      	moveq	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	e015      	b.n	8001e4e <HAL_TIM_PWM_Start+0x6a>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d109      	bne.n	8001e3c <HAL_TIM_PWM_Start+0x58>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e008      	b.n	8001e4e <HAL_TIM_PWM_Start+0x6a>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	bf14      	ite	ne
 8001e48:	2301      	movne	r3, #1
 8001e4a:	2300      	moveq	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e05e      	b.n	8001f14 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d104      	bne.n	8001e66 <HAL_TIM_PWM_Start+0x82>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e64:	e013      	b.n	8001e8e <HAL_TIM_PWM_Start+0xaa>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d104      	bne.n	8001e76 <HAL_TIM_PWM_Start+0x92>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e74:	e00b      	b.n	8001e8e <HAL_TIM_PWM_Start+0xaa>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d104      	bne.n	8001e86 <HAL_TIM_PWM_Start+0xa2>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e84:	e003      	b.n	8001e8e <HAL_TIM_PWM_Start+0xaa>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2201      	movs	r2, #1
 8001e94:	6839      	ldr	r1, [r7, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fb62 	bl	8002560 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f1c <HAL_TIM_PWM_Start+0x138>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d107      	bne.n	8001eb6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a18      	ldr	r2, [pc, #96]	@ (8001f1c <HAL_TIM_PWM_Start+0x138>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00e      	beq.n	8001ede <HAL_TIM_PWM_Start+0xfa>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec8:	d009      	beq.n	8001ede <HAL_TIM_PWM_Start+0xfa>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <HAL_TIM_PWM_Start+0x13c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d004      	beq.n	8001ede <HAL_TIM_PWM_Start+0xfa>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a12      	ldr	r2, [pc, #72]	@ (8001f24 <HAL_TIM_PWM_Start+0x140>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d111      	bne.n	8001f02 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b06      	cmp	r3, #6
 8001eee:	d010      	beq.n	8001f12 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f00:	e007      	b.n	8001f12 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0201 	orr.w	r2, r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40012c00 	.word	0x40012c00
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40000800 	.word	0x40000800

08001f28 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2200      	movs	r2, #0
 8001f38:	6839      	ldr	r1, [r7, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fb10 	bl	8002560 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a29      	ldr	r2, [pc, #164]	@ (8001fec <HAL_TIM_PWM_Stop+0xc4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d117      	bne.n	8001f7a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6a1a      	ldr	r2, [r3, #32]
 8001f50:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10f      	bne.n	8001f7a <HAL_TIM_PWM_Stop+0x52>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6a1a      	ldr	r2, [r3, #32]
 8001f60:	f240 4344 	movw	r3, #1092	@ 0x444
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d107      	bne.n	8001f7a <HAL_TIM_PWM_Stop+0x52>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a1a      	ldr	r2, [r3, #32]
 8001f80:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10f      	bne.n	8001faa <HAL_TIM_PWM_Stop+0x82>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6a1a      	ldr	r2, [r3, #32]
 8001f90:	f240 4344 	movw	r3, #1092	@ 0x444
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d107      	bne.n	8001faa <HAL_TIM_PWM_Stop+0x82>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0201 	bic.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d104      	bne.n	8001fba <HAL_TIM_PWM_Stop+0x92>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fb8:	e013      	b.n	8001fe2 <HAL_TIM_PWM_Stop+0xba>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d104      	bne.n	8001fca <HAL_TIM_PWM_Stop+0xa2>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fc8:	e00b      	b.n	8001fe2 <HAL_TIM_PWM_Stop+0xba>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d104      	bne.n	8001fda <HAL_TIM_PWM_Stop+0xb2>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fd8:	e003      	b.n	8001fe2 <HAL_TIM_PWM_Stop+0xba>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40012c00 	.word	0x40012c00

08001ff0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800200a:	2302      	movs	r3, #2
 800200c:	e0ae      	b.n	800216c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b0c      	cmp	r3, #12
 800201a:	f200 809f 	bhi.w	800215c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800201e:	a201      	add	r2, pc, #4	@ (adr r2, 8002024 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002024:	08002059 	.word	0x08002059
 8002028:	0800215d 	.word	0x0800215d
 800202c:	0800215d 	.word	0x0800215d
 8002030:	0800215d 	.word	0x0800215d
 8002034:	08002099 	.word	0x08002099
 8002038:	0800215d 	.word	0x0800215d
 800203c:	0800215d 	.word	0x0800215d
 8002040:	0800215d 	.word	0x0800215d
 8002044:	080020db 	.word	0x080020db
 8002048:	0800215d 	.word	0x0800215d
 800204c:	0800215d 	.word	0x0800215d
 8002050:	0800215d 	.word	0x0800215d
 8002054:	0800211b 	.word	0x0800211b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f8f6 	bl	8002250 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0208 	orr.w	r2, r2, #8
 8002072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0204 	bic.w	r2, r2, #4
 8002082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6999      	ldr	r1, [r3, #24]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	619a      	str	r2, [r3, #24]
      break;
 8002096:	e064      	b.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f93c 	bl	800231c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6999      	ldr	r1, [r3, #24]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	021a      	lsls	r2, r3, #8
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	619a      	str	r2, [r3, #24]
      break;
 80020d8:	e043      	b.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 f985 	bl	80023f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	69da      	ldr	r2, [r3, #28]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0208 	orr.w	r2, r2, #8
 80020f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0204 	bic.w	r2, r2, #4
 8002104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69d9      	ldr	r1, [r3, #28]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	61da      	str	r2, [r3, #28]
      break;
 8002118:	e023      	b.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	4618      	mov	r0, r3
 8002122:	f000 f9cf 	bl	80024c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	69da      	ldr	r2, [r3, #28]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69d9      	ldr	r1, [r3, #28]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	021a      	lsls	r2, r3, #8
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	61da      	str	r2, [r3, #28]
      break;
 800215a:	e002      	b.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	75fb      	strb	r3, [r7, #23]
      break;
 8002160:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800216a:	7dfb      	ldrb	r3, [r7, #23]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a2f      	ldr	r2, [pc, #188]	@ (8002244 <TIM_Base_SetConfig+0xd0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00b      	beq.n	80021a4 <TIM_Base_SetConfig+0x30>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002192:	d007      	beq.n	80021a4 <TIM_Base_SetConfig+0x30>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a2c      	ldr	r2, [pc, #176]	@ (8002248 <TIM_Base_SetConfig+0xd4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d003      	beq.n	80021a4 <TIM_Base_SetConfig+0x30>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a2b      	ldr	r2, [pc, #172]	@ (800224c <TIM_Base_SetConfig+0xd8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d108      	bne.n	80021b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a22      	ldr	r2, [pc, #136]	@ (8002244 <TIM_Base_SetConfig+0xd0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00b      	beq.n	80021d6 <TIM_Base_SetConfig+0x62>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c4:	d007      	beq.n	80021d6 <TIM_Base_SetConfig+0x62>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002248 <TIM_Base_SetConfig+0xd4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d003      	beq.n	80021d6 <TIM_Base_SetConfig+0x62>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a1e      	ldr	r2, [pc, #120]	@ (800224c <TIM_Base_SetConfig+0xd8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d108      	bne.n	80021e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a0d      	ldr	r2, [pc, #52]	@ (8002244 <TIM_Base_SetConfig+0xd0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d103      	bne.n	800221c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f023 0201 	bic.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	611a      	str	r2, [r3, #16]
  }
}
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	40012c00 	.word	0x40012c00
 8002248:	40000400 	.word	0x40000400
 800224c:	40000800 	.word	0x40000800

08002250 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f023 0201 	bic.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800227e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f023 0303 	bic.w	r3, r3, #3
 8002286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f023 0302 	bic.w	r3, r3, #2
 8002298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002318 <TIM_OC1_SetConfig+0xc8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d10c      	bne.n	80022c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f023 0308 	bic.w	r3, r3, #8
 80022b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f023 0304 	bic.w	r3, r3, #4
 80022c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a13      	ldr	r2, [pc, #76]	@ (8002318 <TIM_OC1_SetConfig+0xc8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d111      	bne.n	80022f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80022dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	621a      	str	r2, [r3, #32]
}
 800230c:	bf00      	nop
 800230e:	371c      	adds	r7, #28
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40012c00 	.word	0x40012c00

0800231c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f023 0210 	bic.w	r2, r3, #16
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800234a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4313      	orrs	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f023 0320 	bic.w	r3, r3, #32
 8002366:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a1d      	ldr	r2, [pc, #116]	@ (80023ec <TIM_OC2_SetConfig+0xd0>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d10d      	bne.n	8002398 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002396:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a14      	ldr	r2, [pc, #80]	@ (80023ec <TIM_OC2_SetConfig+0xd0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d113      	bne.n	80023c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80023a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80023ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	621a      	str	r2, [r3, #32]
}
 80023e2:	bf00      	nop
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	40012c00 	.word	0x40012c00

080023f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800241e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f023 0303 	bic.w	r3, r3, #3
 8002426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a1d      	ldr	r2, [pc, #116]	@ (80024c0 <TIM_OC3_SetConfig+0xd0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d10d      	bne.n	800246a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a14      	ldr	r2, [pc, #80]	@ (80024c0 <TIM_OC3_SetConfig+0xd0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d113      	bne.n	800249a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	621a      	str	r2, [r3, #32]
}
 80024b4:	bf00      	nop
 80024b6:	371c      	adds	r7, #28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40012c00 	.word	0x40012c00

080024c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800250e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	031b      	lsls	r3, r3, #12
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a0f      	ldr	r2, [pc, #60]	@ (800255c <TIM_OC4_SetConfig+0x98>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d109      	bne.n	8002538 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800252a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	019b      	lsls	r3, r3, #6
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	621a      	str	r2, [r3, #32]
}
 8002552:	bf00      	nop
 8002554:	371c      	adds	r7, #28
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	40012c00 	.word	0x40012c00

08002560 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2201      	movs	r2, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a1a      	ldr	r2, [r3, #32]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	43db      	mvns	r3, r3
 8002582:	401a      	ands	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a1a      	ldr	r2, [r3, #32]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	431a      	orrs	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	621a      	str	r2, [r3, #32]
}
 800259e:	bf00      	nop
 80025a0:	371c      	adds	r7, #28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025bc:	2302      	movs	r3, #2
 80025be:	e046      	b.n	800264e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a16      	ldr	r2, [pc, #88]	@ (8002658 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00e      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800260c:	d009      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a12      	ldr	r2, [pc, #72]	@ (800265c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d004      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a10      	ldr	r2, [pc, #64]	@ (8002660 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10c      	bne.n	800263c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	4313      	orrs	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	40012c00 	.word	0x40012c00
 800265c:	40000400 	.word	0x40000400
 8002660:	40000800 	.word	0x40000800

08002664 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e042      	b.n	80026fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe f8bc 	bl	8000808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2224      	movs	r2, #36	@ 0x24
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f82b 	bl	8002704 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800273e:	f023 030c 	bic.w	r3, r3, #12
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	430b      	orrs	r3, r1
 800274a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a2c      	ldr	r2, [pc, #176]	@ (8002818 <UART_SetConfig+0x114>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d103      	bne.n	8002774 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800276c:	f7fe ffd2 	bl	8001714 <HAL_RCC_GetPCLK2Freq>
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	e002      	b.n	800277a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002774:	f7fe ffba 	bl	80016ec <HAL_RCC_GetPCLK1Freq>
 8002778:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	009a      	lsls	r2, r3, #2
 8002784:	441a      	add	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	4a22      	ldr	r2, [pc, #136]	@ (800281c <UART_SetConfig+0x118>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	0119      	lsls	r1, r3, #4
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	009a      	lsls	r2, r3, #2
 80027a4:	441a      	add	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80027b0:	4b1a      	ldr	r3, [pc, #104]	@ (800281c <UART_SetConfig+0x118>)
 80027b2:	fba3 0302 	umull	r0, r3, r3, r2
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	2064      	movs	r0, #100	@ 0x64
 80027ba:	fb00 f303 	mul.w	r3, r0, r3
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	3332      	adds	r3, #50	@ 0x32
 80027c4:	4a15      	ldr	r2, [pc, #84]	@ (800281c <UART_SetConfig+0x118>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027d0:	4419      	add	r1, r3
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	009a      	lsls	r2, r3, #2
 80027dc:	441a      	add	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e8:	4b0c      	ldr	r3, [pc, #48]	@ (800281c <UART_SetConfig+0x118>)
 80027ea:	fba3 0302 	umull	r0, r3, r3, r2
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2064      	movs	r0, #100	@ 0x64
 80027f2:	fb00 f303 	mul.w	r3, r0, r3
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	3332      	adds	r3, #50	@ 0x32
 80027fc:	4a07      	ldr	r2, [pc, #28]	@ (800281c <UART_SetConfig+0x118>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	f003 020f 	and.w	r2, r3, #15
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	440a      	add	r2, r1
 800280e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40013800 	.word	0x40013800
 800281c:	51eb851f 	.word	0x51eb851f

08002820 <memset>:
 8002820:	4603      	mov	r3, r0
 8002822:	4402      	add	r2, r0
 8002824:	4293      	cmp	r3, r2
 8002826:	d100      	bne.n	800282a <memset+0xa>
 8002828:	4770      	bx	lr
 800282a:	f803 1b01 	strb.w	r1, [r3], #1
 800282e:	e7f9      	b.n	8002824 <memset+0x4>

08002830 <__libc_init_array>:
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	2600      	movs	r6, #0
 8002834:	4d0c      	ldr	r5, [pc, #48]	@ (8002868 <__libc_init_array+0x38>)
 8002836:	4c0d      	ldr	r4, [pc, #52]	@ (800286c <__libc_init_array+0x3c>)
 8002838:	1b64      	subs	r4, r4, r5
 800283a:	10a4      	asrs	r4, r4, #2
 800283c:	42a6      	cmp	r6, r4
 800283e:	d109      	bne.n	8002854 <__libc_init_array+0x24>
 8002840:	f000 f81a 	bl	8002878 <_init>
 8002844:	2600      	movs	r6, #0
 8002846:	4d0a      	ldr	r5, [pc, #40]	@ (8002870 <__libc_init_array+0x40>)
 8002848:	4c0a      	ldr	r4, [pc, #40]	@ (8002874 <__libc_init_array+0x44>)
 800284a:	1b64      	subs	r4, r4, r5
 800284c:	10a4      	asrs	r4, r4, #2
 800284e:	42a6      	cmp	r6, r4
 8002850:	d105      	bne.n	800285e <__libc_init_array+0x2e>
 8002852:	bd70      	pop	{r4, r5, r6, pc}
 8002854:	f855 3b04 	ldr.w	r3, [r5], #4
 8002858:	4798      	blx	r3
 800285a:	3601      	adds	r6, #1
 800285c:	e7ee      	b.n	800283c <__libc_init_array+0xc>
 800285e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002862:	4798      	blx	r3
 8002864:	3601      	adds	r6, #1
 8002866:	e7f2      	b.n	800284e <__libc_init_array+0x1e>
 8002868:	080028bc 	.word	0x080028bc
 800286c:	080028bc 	.word	0x080028bc
 8002870:	080028bc 	.word	0x080028bc
 8002874:	080028c0 	.word	0x080028c0

08002878 <_init>:
 8002878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287a:	bf00      	nop
 800287c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287e:	bc08      	pop	{r3}
 8002880:	469e      	mov	lr, r3
 8002882:	4770      	bx	lr

08002884 <_fini>:
 8002884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002886:	bf00      	nop
 8002888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288a:	bc08      	pop	{r3}
 800288c:	469e      	mov	lr, r3
 800288e:	4770      	bx	lr
